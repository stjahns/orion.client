/*******************************************************************************
 * Copyright (c) 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
/*global window widgets eclipse:true serviceRegistry dojo dijit */
/*jslint maxerr:150 browser:true devel:true regexp:false*/


/**
 * @namespace The global container for eclipse APIs.
 */ 
var eclipse = eclipse || {};

/**
 * Utility methods
 * @namespace eclipse.editorFeatures generates editor rulers, commands, 
 *   keybindings for different features available in the editor.
 */
 
eclipse.editorFeatures = eclipse.editorFeatures || {};

eclipse.editorFeatures.updateEditorToolbar = function(toolbarId, editor, commandService) {
	var toolbar = dojo.byId(toolbarId);
	if (toolbar) {	
		dojo.empty(toolbar);
		commandService.renderCommands(toolbar, "dom", editor, editor, "image");
	}
};
/**
 * Creates the common text editing commands.  Also generates commands for any installed plug-ins that
 * contribute editor actions.  
 */
eclipse.editorFeatures.createEditorCommands = function(serviceRegistry, commandService, editor, toolbarId) {

	// create commands common to all editors
	editor.getEditorWidget().setKeyBinding(new eclipse.KeyBinding('s', true), "eclipse.save");
	editor.getEditorWidget().setAction("eclipse.save", function () {
		var contents = editor.getEditorWidget().getText();
		serviceRegistry.getService("ISaveable").then(function(saveService) {
			saveService.doSave(editor.getFileURI(), contents);
		});
		editor.onInputChange(editor.getFileURI(), null, contents, true);
	});
	var saveCommand = new eclipse.Command({
		name: "Save",
		image: "images/save_edit.gif",
		id: "eclipse.save",
		callback: function(editor) {
			editor.getEditorWidget().invokeAction("eclipse.save");
		}});
	commandService.addCommand(saveCommand, "dom");
	commandService.addCommandGroup("eclipse.editorActions.unlabeled", 200, null, null, toolbarId);
	commandService.registerCommandContribution("eclipse.save", 1, toolbarId, "eclipse.editorActions.unlabeled");
	
	// TODO This should be conditional...if we are given a service registry do it, otherwise do not.
	// add the commands generated by plug-ins who implement the "editorActions" extension.
	// we currently position these first so that the regular commands always appear in the same place (on the right) regardless of installed plug-ins
	// eventually we should define command groups that are more functional in nature and that would require the extension knowing where it wants to be
	commandService.addCommandGroup("eclipse.editorActions.contributed.noImages", 100, "More", null, toolbarId);
	commandService.addCommandGroup("eclipse.editorActions.contributed.images", 101, null, null, toolbarId);

	// Note that the shape of the "editorActions" extension is not in any shape or form that could be considered final.
	// We've included it to enable experimentation. Please provide feedback in the following bug:
	// https://bugs.eclipse.org/bugs/show_bug.cgi?id=337766
	
	// The shape of the contributed actions is (for now):
	// info - information about the action (object).
	//        required attribute: name - the name of the action
	//        optional attribute: key - an array with values to pass to the eclipse.KeyBinding constructor
	//        optional attribute: img - a URL to an image for the action
	// run - the implementation of the action (function).
	//        arguments passed to run: (selectedText, fullText, selection)
	//          selectedText (string) - the currently selected text in the editor
	//          fullText (string) - the complete text of the editor
	//          selection (object) - an object with attributes: start, end
	//        the return value of the run function will be used as follows:
	//          if the return value is a string, the current selection in the editor will be replaced with the returned string
	//          if the return value is an object, its "text" attribute (required) will be used to replace the contents of the editor,
	//                                            and its "selection" attribute (optional) will be used to set the new selection.

	// iterate through the extension points and generate commands for each one.
	var actionReferences = serviceRegistry.getServiceReferences("editorAction");
	
	// KB exists so that we can pass an array (from info.key) rather than actual arguments
	function KB(args) {
		return eclipse.KeyBinding.apply(this, args);
	}

	for (var i=0; i<actionReferences.length; i++) {
		serviceRegistry.getService(actionReferences[i]).then(function(service) {
			service.info().then(function(info) {
				var editorWidget = editor.getEditorWidget();
				var command = new eclipse.Command({
					name: info.name,
					image: info.img,
					id: info.name,
					callback: dojo.hitch(editor, function(editor) {
						// command service will provide editor parameter but editor widget callback will not
						var editorWidget = editor ? editor.getEditorWidget() : this.getEditorWidget();
						var text = editorWidget.getText();
						var selection = editorWidget.getSelection();
						service.run(editorWidget.getText(selection.start,selection.end),text,selection).then(function(result){
							if (result.text) {
								editorWidget.setText(result.text);
								if (result.selection) {
									editorWidget.setSelection(result.selection.start, result.selection.end);
									editorWidget.focus();
								}
							} else {
								if (typeof result === 'string') {
									editorWidget.setText(result, selection.start, selection.end);
									editorWidget.setSelection(selection.start, selection.end);
									editorWidget.focus();
								}
							}
						});
						
					})});
				commandService.addCommand(command, "dom");
				if (info.img) {
					// image will be placed on toolbar
					commandService.registerCommandContribution(command.id, i, toolbarId, "eclipse.editorActions.contributed.images");
				} else {
					// if there is no image it will be grouped in a "More..." menu button
					commandService.registerCommandContribution(command.id, i, toolbarId, "eclipse.editorActions.contributed.noImages");
				}
				eclipse.editorFeatures.updateEditorToolbar(toolbarId, editor, commandService);
				if (info.key) {
					// add it to the editor as a keybinding
					KB.prototype = eclipse.KeyBinding.prototype;
					editorWidget.setKeyBinding(new KB(info.key), command.id);
					editorWidget.setAction(command.id, command.callback);
				}
			});
		});
	}
};

eclipse.editorFeatures.undoFactory = function (serviceRegistry, commandService, editor, toolbarId) {
	var undoStack =  new eclipse.UndoStack(editor.getEditorWidget(), 200);
	editor.getEditorWidget().setKeyBinding(new eclipse.KeyBinding('z', true), "eclipse.undo");
	editor.getEditorWidget().setAction("eclipse.undo", function() {
		undoStack.undo();
		return true;
	});
	var undoCommand = new eclipse.Command({
		name: "Undo",
		image: "images/undo_edit.gif",
		id: "eclipse.undo",
		callback: function(editor) {
			editor.getEditorWidget().invokeAction("eclipse.undo");
		}});
	commandService.addCommand(undoCommand, "dom");
			
	var isMac = navigator.platform.indexOf("Mac") !== -1;
	editor.getEditorWidget().setKeyBinding(isMac ? new eclipse.KeyBinding('z', true, true) : new eclipse.KeyBinding('y', true), "eclipse.redo");
	editor.getEditorWidget().setAction("eclipse.redo", function() {
		undoStack.redo();
		return true;
	});
	
	var redoCommand = new eclipse.Command({
		name: "Redo",
		image: "images/redo_edit.gif",
		id: "eclipse.redo",
		callback: function(editor) {
			editor.getEditorWidget().invokeAction("eclipse.redo");
		}});
	commandService.addCommand(redoCommand, "dom");
	
	commandService.registerCommandContribution("eclipse.undo", 400, toolbarId, "eclipse.editorActions.unlabeled");
	commandService.registerCommandContribution("eclipse.redo", 401, toolbarId, "eclipse.editorActions.unlabeled");


	return undoStack;
};