/*******************************************************************************
 * @license
 * Copyright (c) 2013 IBM Corporation.
 *
 * THIS FILE IS PROVIDED UNDER THE TERMS OF THE ECLIPSE PUBLIC LICENSE
 * ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE
 * CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.
 * You can obtain a current copy of the Eclipse Public License from
 * http://www.opensource.org/licenses/eclipse-1.0.php
 *
 * Contributors:
 *     Manu Sridharan (IBM) - Initial API and implementation
 ******************************************************************************/

// this file was generated by a script from the model in types.js
/*global define */
define("plugins/esprima/indexFiles/nodeIndex", [], function () {
	return {
		"!name": "nodejs",
		"!define": {
			"Process": {
				"!proto": "Object",
				"on": {
					"!type": "fn(kind: String, callback: fn())"
				},
				"abort": {
					"!type": "fn()"
				},
				"stdout": "Stream",
				"stderr": "Stream",
				"stdin": "Stream",
				"argv": "Array",
				"execPath": "String",
				"chdir": {
					"!type": "fn(directory: String)"
				},
				"cwd": {
					"!type": "fn() -> String"
				},
				"env": "Object",
				"getgid": {
					"!type": "fn() -> Number"
				},
				"setgid": {
					"!type": "fn(id: Number)"
				},
				"getuid": {
					"!type": "fn() -> Number"
				},
				"setuid": {
					"!type": "fn(id: Number)"
				},
				"version": "String",
				"versions": "Object",
				"config": "Object",
				"kill": {
					"!type": "fn(pid: Number, signal?: Number)"
				},
				"pid": "Number",
				"title": "String",
				"arch": "String",
				"platform": "String",
				"memoryUsage": {
					"!type": "fn() -> Object"
				},
				"nextTick": {
					"!type": "fn(callback: fn())"
				},
				"umask": {
					"!type": "fn(mask?: Number)"
				},
				"uptime": {
					"!type": "fn() -> Number"
				},
				"hrtime": {
					"!type": "fn() -> Array"
				}
			},
			"Stream": {
				"!proto": "Object",
				"data": {
					"!type": "fn(data: Object)"
				},
				"error": {
					"!type": "fn(exception: Object)"
				},
				"close": {
					"!type": "fn()"
				},
				"readable": "Boolean",
				"setEncoding": {
					"!type": "fn(encoding?: String)"
				},
				"pause": {
					"!type": "fn()"
				},
				"resume": {
					"!type": "fn()"
				},
				"pipe": {
					"!type": "fn(destination: Object, options?: Object)"
				},
				"drain": {
					"!type": "fn()"
				},
				"writable": "Boolean",
				"write": {
					"!type": "fn(buffer?: Object)"
				},
				"end": {
					"!type": "fn(string?: String, encoding?: String)"
				},
				"destroy": {
					"!type": "fn()"
				},
				"destroySoon": {
					"!type": "fn()"
				}
			},
			"Module": {}
		},
		"this": "<top>",
		"Buffer": "Object",
		"console": "Object",
		"module": "<top>",
		"process": "Process",
		"require": {
			"!type": "fn(module: String) -> Object"
		},
		"clearInterval": {
			"!type": "fn(t: Number)"
		},
		"clearTimeout": {
			"!type": "fn(t: Number)"
		},
		"setInterval": {
			"!type": "fn(callback: Function, ms: Number) -> Number"
		},
		"setTimeout": {
			"!type": "fn(callback: Function, ms: Number) -> Number"
		},
		"global": "<top>",
		"querystring": "String",
		"__filename": "String",
		"__dirname": "String"
	};
});